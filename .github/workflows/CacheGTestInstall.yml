name: Cache GTest install

on:
  push: 
    branches: [master, develop]
  pull_request:
    branches: [master, develop]

env:
  projectName: CMakeStarterProjectWithTests
  # GTest_VERSION: 1.13.0
  NAME: 'Snyk Demo'

jobs:
  build-on-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Install Ninja
      uses: seanmiddleditch/gha-setup-ninja@master

    - name: Grant tar root ownership and execution (needed to untar cached objects)
      run: sudo chown root /usr/bin/tar && sudo chmod u+s /usr/bin/tar

    - name: Cache GTest
      id: linux-GTest-ID-installed-cache1
      uses: actions/cache@v3
      with:
        path: |
          /usr/include/gtest/
          /usr/include/gmock/
          /usr/lib/x86_64-linux-gnu/*gtest*
          /usr/lib/x86_64-linux-gnu/*gmock*
          /usr/lib/x86_64-linux-gnu/cmake/
        key: linux-GTest-KEY-installed-cache1

    # - name: Is GTest cached? Do not install GTest!
    - name: Restore GTest from cache; do not reinstall it!
      if: steps.linux-GTest-ID-installed-cache1.outputs.cache-hit == 'true'
      run: |
        echo YES cached!
        echo find /usr/include/gtest -iname gtest*.h
        find /usr/include -iname gtest*.h
        echo find /usr/lib/x86_64-linux-gnu -iname libgtest*.a
        find /usr/lib/x86_64-linux-gnu -iname libgtest*.a
        find /usr/lib/x86_64-linux-gnu -iname libgtest*.so
        find /usr/lib/x86_64-linux-gnu -iname gmock*.h
        find /usr/lib/x86_64-linux-gnu -iname libgmock*.a
        find /usr/lib/x86_64-linux-gnu -iname libgmock*.so
        echo find /usr/lib/x86_64-linux-gnu/cmake/GTest -iname gtest*config.cmake
        find /usr/lib/x86_64-linux-gnu/cmake/GTest -iname gtest*config.cmake
        find /usr/lib/x86_64-linux-gnu/cmake/GTest -iname gmock*config.cmake

    # - name: Is GTest not yet cached? Install GTest and cache it!
    - name: Install GTest since it is not yet cached
      if: steps.linux-GTest-ID-installed-cache1.outputs.cache-hit != 'true'
    # - name: Install GTest but do NOT cache it (caching of GTest doesn't work on Ubuntu)
      run: |
        echo sudo apt-get install libgtest-dev
        sudo apt-get install libgtest-dev
        echo sudo apt-get install libgmock-dev
        sudo apt-get install libgmock-dev

        echo NO not yet cached!
        echo find /usr/include/gtest -iname gtest*.h
        find /usr/include -iname gtest*.h
        echo find /usr/lib/x86_64-linux-gnu -iname libgtest*.a
        find /usr/lib/x86_64-linux-gnu -iname libgtest*.a
        find /usr/lib/x86_64-linux-gnu -iname libgtest*.so
        find /usr/lib/x86_64-linux-gnu -iname gmock*.h
        find /usr/lib/x86_64-linux-gnu -iname libgmock*.a
        find /usr/lib/x86_64-linux-gnu -iname libgmock*.so
        echo find /usr/lib/x86_64-linux-gnu/cmake/GTest -iname gtest*config.cmake
        find /usr/lib/x86_64-linux-gnu/cmake/GTest -iname gtest*config.cmake
        find /usr/lib/x86_64-linux-gnu/cmake/GTest -iname gmock*config.cmake

        echo ls /usr/lib/x86_64-linux-gnu/cmake/GTest
        ls /usr/lib/x86_64-linux-gnu/cmake/GTest
      # echo ls /usr/include/gtest
      # ls /usr/include/gtest
        
    - name: CMake configure --- Ninja, Gnu, Debug
      run: |
        echo cmake --preset Ninja-Gnu-Debug -D GTest_DIR=/usr/lib/x86_64-linux-gnu/cmake/GTest
        cmake --preset Ninja-Gnu-Debug -D GTest_DIR=/usr/lib/x86_64-linux-gnu/cmake/GTest

    - name: CMake build --- Ninja, Gnu, Debug
      run: |
        echo cmake --build --preset Ninja-Gnu-Debug
        cmake --build  --preset Ninja-Gnu-Debug

    - name: CMake run --- Ninja, Gnu, Debug
      run: |
        echo cmake --build --preset Ninja-Gnu-Debug
        cmake --build --preset Ninja-Gnu-Debug --target run

    - name: CMake unit test --- Ninja, Gnu, Debug
      run: |
        echo cmake --build --preset Ninja-Gnu-Debug
        cmake --build --preset Ninja-Gnu-Debug --target runUnitTest


  build-on-macos:
    runs-on: macos-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Install Ninja
      uses: seanmiddleditch/gha-setup-ninja@master

    - name: Cache GTest
      id: mac-GTest-ID-installed-cache4
      uses: actions/cache@v3
      with:
        path: |
          /usr/local/Cellar/googletest/1.14.0/include
          /usr/local/lib/*gtest*
          /usr/local/lib/*gmock*
          /usr/local/lib/cmake/GTest/
        # /usr/include/gtest/
        # /usr/include/gmock/
        key: mac-GTest-KEY-installed-cache4

    # - name: Grant tar root ownership and execution (needed to untar cached objects)
    #   run: |
    #     echo which find
    #     which find
    #     sudo chown root /usr/bin/find && sudo chmod u+s /usr/bin/find

    - name: Look for header files 1
      run: ls /usr/local/lib

    - name: Look for header files 2
      run: ls /usr/local/include

    - name: Restore GTest from cache; do not reinstall it!
      if: steps.mac-GTest-ID-installed-cache4.outputs.cache-hit == 'true'
      run: |
        echo YES cached!
        echo find /usr/local -iname gtest.h
        find /usr/local -iname gtest.h
        echo find /usr/local -iname gmock.h
        find /usr/local -iname gmock.h
        echo find /usr/local/lib -iname libgtest*.a
        find /usr/local/lib -iname libgtest*.a
        find /usr/local/lib -iname libgtest*.so
        find /usr/local/lib -iname libgtest*.dylib
        find /usr/local/lib -iname gmock*.h
        find /usr/local/lib -iname libgmock*.a
        find /usr/local/lib -iname libgmock*.dylib
        find /usr/local/lib -iname libgmock*.so
        echo find /usr/local/lib/cmake/GTest -iname GTestConfig.cmake
        find /usr/local/lib/cmake/GTest -iname GTestConfig.cmake
        find /usr/local/lib/cmake/GTest -iname gmock?config.cmake
        echo find /usr/local/Cellar/googletest -iname GTestConfig.cmake
        find /usr/local/Cellar/googletest -iname GTestConfig.cmake

        # echo ATTENTION ls /usr/local/lib/cmake/GTest/
        # ls /usr/local/lib/cmake/GTest/
        echo ATTENTION ls /usr/local/lib
        ls /usr/local/lib

      # /usr/local/lib/cmake/GTest
      # find /usr/local/Cellar/googletest -iname gtest.h
      # echo find /usr/local/Cellar/googletest -iname libgtest*.a
      # find /usr/local/Cellar/googletest -iname libgtest*.a
      # find /usr/local/Cellar/googletest -iname libgtest*.so
      # find /usr/local/Cellar/googletest -iname libgtest*.dylib
      # find /usr/local/Cellar/googletest -iname gmock*.h
      # find /usr/local/Cellar/googletest -iname libgmock*.a
      # find /usr/local/Cellar/googletest -iname libgmock*.dylib
      # find /usr/local/Cellar/googletest -iname libgmock*.so
      # echo find /usr/local/Cellar/googletest -iname GTestConfig.cmake
      # find /usr/local/Cellar/googletest -iname GTestConfig.cmake
      # find /usr/local/Cellar/googletest -iname gmock?config.cmake

    - name: Install GTest since it is not yet cached
      if: steps.mac-GTest-ID-installed-cache4.outputs.cache-hit != 'true'
      run: |
        echo brew install googletest
        brew install googletest

        echo NO not yet cached!
        echo find /usr -iname gtest.h
        find /usr -iname gtest.h
        echo find /usr -iname gmock.h
        find /usr -iname gmock.h
        echo find /usr/local/lib -iname libgtest*.a
        find /usr/local/lib -iname libgtest*.a
        find /usr/local/lib -iname libgtest*.so
        find /usr/local/lib -iname libgtest*.dylib
        find /usr/local/lib -iname gmock*.h
        find /usr/local/lib -iname libgmock*.a
        find /usr/local/lib -iname libgmock*.dylib
        find /usr/local/lib -iname libgmock*.so
        echo find /usr/local/lib/cmake/GTest -iname GTestConfig.cmake
        find /usr/local/lib/cmake/GTest -iname GTestConfig.cmake
        find /usr/local/lib/cmake/GTest -iname gmock?config.cmake
        echo find /usr/local/Cellar/googletest -iname GTestConfig.cmake
        find /usr/local/Cellar/googletest -iname GTestConfig.cmake

        echo ATTENTION ls /usr/local/lib/cmake/GTest/
        ls /usr/local/lib/cmake/GTest/

      # find /usr/local/Cellar/googletest -iname gtest.h
      # echo find /usr/local/Cellar/googletest -iname libgtest*.a
      # find /usr/local/Cellar/googletest -iname libgtest*.a
      # find /usr/local/Cellar/googletest -iname libgtest*.so
      # find /usr/local/Cellar/googletest -iname libgtest*.dylib
      # find /usr/local/Cellar/googletest -iname gmock*.h
      # find /usr/local/Cellar/googletest -iname libgmock*.a
      # find /usr/local/Cellar/googletest -iname libgmock*.dylib
      # find /usr/local/Cellar/googletest -iname libgmock*.so
      # echo find /usr/local/Cellar/googletest -iname GTestConfig.cmake
      # find /usr/local/Cellar/googletest -iname GTestConfig.cmake
      # find /usr/local/Cellar/googletest -iname gmock?config.cmake

    - name: CMake configure --- Ninja, Clang, Debug
      run: |
        echo cmake --preset Ninja-Clang-Debug -D GTest_DIR=/usr/local/lib/cmake/GTest
        cmake --preset Ninja-Clang-Debug -D GTest_DIR=/usr/local/lib/cmake/GTest
      # echo cmake --preset Ninja-Clang-Debug -D GTest_DIR=/usr/local/Cellar/googletest
      # cmake --preset Ninja-Clang-Debug -D GTest_DIR=/usr/local/Cellar/googletest
      # echo cmake --preset Ninja-Clang-Debug -D GTest_DIR=/usr/local/Cellar/googletest/1.14.0/lib/cmake/GTest
      # cmake --preset Ninja-Clang-Debug -D GTest_DIR=/usr/local/Cellar/googletest/1.14.0/lib/cmake/GTest
      # echo cmake --preset Ninja-Clang-Debug -D GTest_DIR=/usr/local/Cellar/googletest
      # cmake --preset Ninja-Clang-Debug -D GTest_DIR=/usr/local/Cellar/googletest

    - name: CMake build --- Ninja, Clang, Debug
      run: |
        echo cmake --build --preset Ninja-Clang-Debug
        cmake --build --preset Ninja-Clang-Debug

    - name: CMake run --- Ninja, Clang, Debug
      run: |
        echo cmake --build --preset Ninja-Clang-Debug
        cmake --build --preset Ninja-Clang-Debug --target run

    - name: CMake unit test --- Ninja, Clang, Debug
      run: |
        echo cmake --build --preset Ninja-Clang-Debug
        cmake --build --preset Ninja-Clang-Debug --target runUnitTest


  build-on-windows:
    runs-on: windows-latest
    env:
      JAVA_VERSION: '11'

    outputs:
      test-result: ${{ steps.set_outputs.outputs.test-result }}

    steps:
    - name: Print value of env variable
      run: echo "TEST_RESULT = $TEST_RESULT"

    - name: Change env variable
      run: echo "::set-env name=TEST_RESULT::failure"

    - name: Print new value of env variable
      run: echo "TEST_RESULT = $TEST_RESULT"

    # set step-level output and pass the value of env variable to it
    - name: set outputs
      id: set_outputs
      run: |
        echo "::set-output name=test-result::$TEST_RESULT"
  
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Setup MSVC compiler
      uses: ilammy/msvc-dev-cmd@v1

    - name: Install Ninja
      uses: seanmiddleditch/gha-setup-ninja@master

    - name: Set value
      id: step1
      run: echo "action_state=yellow" >> "$GITHUB_ENV"

    - name: get value 1
      id: step2
      run: echo "$action_state

    - name: get value 1
      id: step3
      run: echo "$action_state

    - name: reset value
      id: step4
      run: echo "action_state=red" >> "$GITHUB_ENV"

    - name: get value 2
      id: step5
      run: echo "$action_state
        
    # - name: Set variables
    #   run: |
    #     tests=16
    #     failures=2
    #     # set them as GitHub ENV variables
    #     echo "Tests=$tests" >> $GITHUB_ENV
    #     echo "Failures=$failures" >> $GITHUB_ENV

    # - name: Retrive and reset variables
    #   run: |
    #     tests=22
    #     failures=3
    #     echo "${{ env.Failures }} out of ${{ env.Tests }} tests failed on CI"
    #     echo "Tests=$tests" >> $GITHUB_ENV
    #     echo "Failures=$failures" >> $GITHUB_ENV

    # - name: Retrive variables
    #   run: |
    #     echo "${{ env.Failures }} out of ${{ env.Tests }} tests failed on CI"

    - name: Set color
      id: color-selector
      run: echo "SELECTED_COLOR=green" >> "$GITHUB_OUTPUT"

    - name: Get color
      env:
        SELECTED_COLOR: ${{ steps.color-selector.outputs.SELECTED_COLOR }}
      run: echo "The selected color is $SELECTED_COLOR"

    - name: Print name
      run: echo "Hello $NAME. $BUILD. Using Java Version $JAVA_VERSION"
      env:
        BUILD: 'We are currently running the Build job'

    # - name: Check if dir exists
    #   shell: bash
    #   run: |
    #     if [[ -d External/googletest ]]; then
    #       echo "Directory exists"
    #     else 
    #       echo "Directory does not exists"
    #     fi

    # - name: CMake configure 1
    #   if: steps.windows-GTest-ID-installed-cache1.outputs.cache-hit != 'true'
    #   run: |
    #     echo NO not yet cached!
    #     echo cmake --preset Ninja-Msvc-Debug
    #     cmake --preset Ninja-Msvc-Debug
    #     ls External/googletest

    # - name: Cache GTest
    #   id: windows-GTest-ID-installed-cache1
    #   uses: actions/cache@v3
    #   with:
    #     path: External/googletest
    #     key: windows-GTest-KEY-installed-cache1

    # - name: CMake configure 2
    #   if: steps.windows-GTest-ID-installed-cache1.outputs.cache-hit == 'true'
    #   run: |
    #     echo YES cached!
    #     echo cmake --preset Ninja-Msvc-Debug
    #     cmake --preset Ninja-Msvc-Debug
    #     ls External/googletest

    # # - name: CMake configure --- Ninja, Msvc, Debug
    # #   run: |
    # #     echo cmake --preset Ninja-Msvc-Debug
    # #     cmake --preset Ninja-Msvc-Debug

    # - name: CMake build --- Ninja, Msvc, Debug
    #   run: |
    #     echo cmake --build --preset Ninja-Msvc-Debug
    #     cmake --build --preset Ninja-Msvc-Debug

    # - name: CMake run --- Ninja, Msvc, Debug
    #   run: |
    #     echo cmake --build --preset Ninja-Msvc-Debug
    #     cmake --build --preset Ninja-Msvc-Debug --target run

    # - name: CMake unit test --- Ninja, Msvc, Debug
    #   run: |
    #     echo cmake --build --preset Ninja-Msvc-Debug
    #     cmake --build --preset Ninja-Msvc-Debug --target runUnitTest
